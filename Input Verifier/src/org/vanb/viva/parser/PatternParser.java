/* Generated By:JavaCC: Do not edit this line. PatternParser.java */
package org.vanb.viva.parser;

import org.vanb.viva.patterns.*;
import org.vanb.viva.expressions.*;
import org.vanb.viva.functions.*;
import org.vanb.viva.utils.*;
import org.vanb.viva.*;
import java.util.*;

public class PatternParser implements PatternParserConstants {
    private SymbolTable<Class<?>> symbols = new SymbolTable<Class<?>>();

    private String getPosition( Token token )
    {
        return "At line " + token.beginLine + " column " + token.beginColumn + ": ";
    }

    private HashMap<String,Function> functions = new HashMap<String,Function>();

    public void setFunctions( HashMap<String,Function> f )
    {
        functions = f;
    }

  final public PatternList multilinePattern() throws ParseException {
    PatternList plist = new PatternList();
    Pattern p;
    label_1:
    while (true) {
      p = singlePattern();
          plist.addPattern( p );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 25:
      case 33:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
      {if (true) return plist;}
    throw new Error("Missing return statement in function");
  }

  final public Pattern singlePattern() throws ParseException {
    Pattern pattern;
    PatternListController controller=null;
    PatternList plist;
    ExpressionNode exp=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        controller = qualifier();
        jj_consume_token(27);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                                             symbols.addLevel();
      plist = multilinePattern();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        exp = constraint();
                                 controller.addConstraint( exp );
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 28:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(28);
          exp = constraint();
                                                                                             controller.addConstraint( exp );
        }
        jj_consume_token(27);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(29);
        if( controller==null ) controller = new EOFController();
        symbols.removeLevel();
        controller.setPatternList( plist );
        pattern = controller;
      break;
    case IDENTIFIER:
    case 33:
      plist = simplePattern();
      jj_consume_token(30);
        controller = new SingleLineController();
        controller.setPatternList( plist );
        pattern = controller;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return pattern;}
    throw new Error("Missing return statement in function");
  }

  final public PatternListController qualifier() throws ParseException {
    PatternListController pattern=null;
    Pattern term=null;
    ExpressionNode exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      exp = expression();
        CountController count = new CountController();
        count.setCountExpression( exp );
        pattern = count;
      break;
    case 32:
      jj_consume_token(32);
         symbols.addLevel();
      term = simplePattern();
        symbols.removeLevel();
        MatchController match = new MatchController();
        match.setTerminatingPattern( term );
        pattern = match;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return pattern;}
    throw new Error("Missing return statement in function");
  }

  final public PatternList simplePattern() throws ParseException {
    PatternList plist = new PatternList();
    PatternList innerlist = null;
    PatternListController controller = null;
    ExpressionNode exp = null;
    Token token;
    ValuePattern value = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
          controller = qualifier();
          jj_consume_token(27);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
                                                     symbols.addLevel();
        innerlist = simplePattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
          exp = constraint();
                                     controller.addConstraint( exp );
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 28:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
            jj_consume_token(28);
            exp = constraint();
                                                                                                 controller.addConstraint( exp );
          }
          jj_consume_token(27);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        jj_consume_token(34);
                if( controller==null ) controller = new EOLNController();
                symbols.removeLevel();
                controller.setPatternList( innerlist );
                plist.addPattern( controller );
        break;
      case IDENTIFIER:
        token = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          value = type();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
                  String name = token.image;
                  if( value==null ) value = new IntegerPattern();
                  value.setName( name );
                  plist.addPattern( value );
                  boolean unique = symbols.add( name, value.getType() );
                  if( !unique )
                  {
                      {if (true) throw new ParseException( getPosition(token) + "Variable " + name + " is already defined." );}
                  }
                  value = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
          exp = constraint();
                                  if( exp!=null ) plist.addConstraint( exp );
                                  exp = null;
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 28:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_5;
            }
            jj_consume_token(28);
            exp = constraint();
                                        if( exp!=null ) plist.addConstraint( exp );
                                        exp = null;
          }
          jj_consume_token(37);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 33:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
    }
      {if (true) return plist;}
    throw new Error("Missing return statement in function");
  }

  final public ValuePattern type() throws ParseException {
  ValuePattern pattern = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
      jj_consume_token(DOUBLE);
                    pattern = new DoublePattern();
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                    pattern = new FloatPattern();
      break;
    case LONG:
      jj_consume_token(LONG);
                    pattern = new LongPattern();
      break;
    case INT:
      jj_consume_token(INT);
                    pattern = new IntegerPattern();
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                    pattern = new IntegerPattern();
      break;
    case STRING:
      jj_consume_token(STRING);
                    pattern = new StringPattern();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return pattern;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode constraint() throws ParseException {
    ExpressionNode lhs, rhs;
    BinaryOperatorNode op;
    lhs = orConstraint();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(38);
      rhs = orConstraint();
          op = new OrNode();
          op.instantiate( lhs, rhs );
          lhs = op;
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode orConstraint() throws ParseException {
    ExpressionNode lhs, rhs;
    BinaryOperatorNode op;
    lhs = simpleConstraint();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(39);
      rhs = simpleConstraint();
          op = new AndNode();
          op.instantiate( lhs, rhs );
          lhs = op;
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode simpleConstraint() throws ParseException {
    ExpressionNode lhs, rhs;
    BinaryOperatorNode op=null, newop=null;
    lhs = expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      newop = boolop();
      rhs = expression();
              newop.instantiate( lhs, rhs );

              if( op==null )
              {
                  op = newop;
              }
              else
              {
                      BinaryOperatorNode andop = new AndNode();
                      andop.instantiate( op, newop );
                      op = andop;
              }
              lhs = rhs;
    }
      {if (true) return op==null ? lhs : op;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperatorNode boolop() throws ParseException {
    BinaryOperatorNode op = null;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      token = jj_consume_token(34);
                    op = new GreaterThanNode(); op.operator = token.image;
      break;
    case 33:
      token = jj_consume_token(33);
                    op = new LessThanNode(); op.operator = token.image;
      break;
    case 40:
      token = jj_consume_token(40);
                     op = new GreaterThanEqualToNode(); op.operator = token.image;
      break;
    case 41:
      token = jj_consume_token(41);
                     op = new LessThanEqualToNode(); op.operator = token.image;
      break;
    case 32:
      token = jj_consume_token(32);
                    op = new EqualToNode(); op.operator = token.image;
      break;
    case 42:
      token = jj_consume_token(42);
                     op = new EqualToNode(); op.operator = token.image;
      break;
    case 43:
      token = jj_consume_token(43);
                     op = new NotEqualToNode(); op.operator = token.image;
      break;
    case 44:
      token = jj_consume_token(44);
                     op = new NotEqualToNode(); op.operator = token.image;
      break;
    case 45:
      token = jj_consume_token(45);
                     op = new RegExpNode(); op.operator = token.image;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode expression() throws ParseException {
    ExpressionNode lhs, rhs;
    BinaryOperatorNode op;
    lhs = term();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
      case 47:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      op = addop();
      rhs = term();
          op.instantiate( lhs, rhs );
          lhs = op;
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperatorNode addop() throws ParseException {
    BinaryOperatorNode op = null;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      token = jj_consume_token(46);
                  op = new PlusNode(); op.operator = token.image;
      break;
    case 47:
      token = jj_consume_token(47);
                  op = new MinusNode(); op.operator = token.image;
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode term() throws ParseException {
    ExpressionNode lhs, rhs;
    BinaryOperatorNode op;
    lhs = factor();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
      case 48:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      op = multop();
      rhs = factor();
          op.instantiate( lhs, rhs );
          lhs = op;
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperatorNode multop() throws ParseException {
    BinaryOperatorNode op = null;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      token = jj_consume_token(31);
                  op = new TimesNode(); op.operator = token.image;
      break;
    case 48:
      token = jj_consume_token(48);
                  op = new DivideNode(); op.operator = token.image;
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode factor() throws ParseException {
    Token token;
    ExpressionNode node;
    Object value;
    String lit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      node = named(token.image);
      break;
    case INTEGER_LITERAL:
      token = jj_consume_token(INTEGER_LITERAL);
        boolean islong = token.image.toUpperCase().endsWith( "L" );
        try
        {
            if( islong )
            {
                value = new Long( token.image.substring( 0, token.image.length()-1 ) );
            }
            else
            {
                value = new Integer( token.image );
            }
        }
        catch( Exception e )
        {
            {if (true) throw new ParseException( getPosition(token) + "Unable to parse " + token.image
                + " as " + (islong ? "a Long" : "an Integer") );}
        }

        node = new ConstantNode( value );
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
        boolean isfloat = token.image.toUpperCase().endsWith( "F" );
        try
        {
            if( isfloat )
            {
                value = new Float( token.image );
            }
            else
            {
                value = new Double( token.image );
            }
        }
        catch( Exception e )
        {
            {if (true) throw new ParseException( getPosition(token) + "Unable to parse " + token.image
                + " as a " + (isfloat ? "Float" : "Double") );}
        }
        node = new ConstantNode( value );
      break;
    case CHARACTER_LITERAL:
      token = jj_consume_token(CHARACTER_LITERAL);
        lit = token.image;
        if( lit.startsWith( "'" ) ) lit = lit.substring(1);
        value = new Integer( (int)(lit.charAt(0)) );
        node = new ConstantNode( value );
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
        lit = token.image;
        if( lit.startsWith( "\u005c"" ) ) lit = lit.substring(1);
        if( lit.endsWith( "\u005c"" ) ) lit = lit.substring( 0, lit.length()-1);
        node = new ConstantNode( lit );
      break;
    case 36:
      jj_consume_token(36);
      node = expression();
      jj_consume_token(37);
        node = new ParenthesesNode( node );
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode named(String name) throws ParseException {
    ExpressionNode node = null;
    ExpressionNode subscript = null;
    ExpressionNode parm = null;
    LinkedList<ExpressionNode> parms = new LinkedList<ExpressionNode>();
    Class<?> type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
         type = symbols.lookup( name );
         if( type==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Unknown identifier: " + name );}
         }
         node = new CountNode( name );
      break;
    case 26:
      jj_consume_token(26);
      subscript = expression();
      jj_consume_token(27);
         type = symbols.lookup( name );
         if( type==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Unknown identifier: " + name );}
         }

         if( !subscript.getReturnType().equals( Integer.class ) )
         {
             {if (true) throw new ParseException( getPosition(token) + "Subscript must be Integer, not " + subscript.getReturnType() );}
         }
         node = new SubscriptNode( name, type, subscript );
      break;
    case 36:
      jj_consume_token(36);
      parm = expression();
                            parms.add(parm);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        jj_consume_token(28);
        parm = expression();
                                                                      parms.add(parm);
      }
      jj_consume_token(37);
         Function function = functions.get( name );
         if( function==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Unknown function: " + name );}
         }

         Class<?>[] parmtypes = new Class<?>[ parms.size() ];
         int i=0;
         for( ExpressionNode p : parms )
         {
             parmtypes[i++] = p.getReturnType();
         }

         type = function.getReturnType( parmtypes );
         if( type==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Function usage: " + function.getUsage() );}
         }

         if( function instanceof ScalarFunction )
         {
             node = new ScalarFunctionNode( name, type, (ScalarFunction)function, parms );
         }
         else if( function instanceof VectorFunction )
         {
             node = new VectorFunctionNode( name, type, (VectorFunction)function, parms );
         }
         else
         {
             {if (true) throw new ParseException( getPosition(token) + "Function " + function.getName() + " is neither Scalar nor Vector" );}
         }
      break;
    case 50:
      jj_consume_token(50);
         type = symbols.lookup( name );
         if( type==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Unknown identifier: " + name );}
         }
         node = new VariableNode( name, String.class, false );
      break;
    default:
      jj_la1[25] = jj_gen;
         type = symbols.lookup( name );
         if( type==null )
         {
             {if (true) throw new ParseException( getPosition(token) + "Unknown identifier: " + name );}
         }
         node = new VariableNode( name, type, true );
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PatternParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2400000,0x4000000,0x10000000,0x4000000,0x2400000,0x80000000,0x4000000,0x10000000,0x4000000,0x0,0x10000000,0x0,0x400000,0x400000,0x3f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x40c220,0x10000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x0,0x0,0x0,0x2,0x1,0x0,0x0,0x0,0x8,0x0,0x10,0x2,0x2,0x0,0x40,0x80,0x3f07,0x3f07,0xc000,0xc000,0x10000,0x10000,0x10,0x0,0x60010,};
   }

  /** Constructor with InputStream. */
  public PatternParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PatternParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PatternParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PatternParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PatternParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PatternParser(PatternParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PatternParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
